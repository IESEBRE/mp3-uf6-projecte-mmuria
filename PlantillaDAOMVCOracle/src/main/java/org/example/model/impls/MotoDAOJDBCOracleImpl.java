package org.example.model.impls;

import org.example.model.daos.DAO;
import org.example.model.entities.Moto;
import org.example.model.exceptions.DAOException;

import java.io.IOException;
import java.io.InputStream;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.TreeSet;

public class MotoDAOJDBCOracleImpl implements DAO<Moto> {

    public static String DB_URL;
    public static String DB_USER;
    public static String DB_PASSWORD;

    static {
        try (InputStream input = MotoDAOJDBCOracleImpl.class.getClassLoader().getResourceAsStream("system.properties")) {
            Properties prop = new Properties();
            prop.load(input);

            DB_URL = prop.getProperty("Connect_URL");
            DB_USER = prop.getProperty("Usuari_USER");
            DB_PASSWORD = prop.getProperty("Contrasenya_PASSWORD");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }



    @Override
    public Moto get(Long id) throws DAOException {
        Moto moto = null;
        String query = "SELECT * FROM MOTOS WHERE ID = ?";

        try (Connection con = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement pst = con.prepareStatement(query)) {

            pst.setLong(1, id);
            try (ResultSet rs = pst.executeQuery()) {
                TreeSet<Moto.Quantitat> matricules = new TreeSet<>();

                if (rs.next()) {
                    moto = new Moto(
                            rs.getInt("id"),
                            rs.getString("model"),
                            rs.getDouble("pes"),
                            rs.getBoolean("es_en_marches"),
                            matricules
                    );
                }
            }
        } catch (SQLException e) {
            //throw new DAOException("Error accessing database", e);
        }
        return moto;
    }

    @Override
    public List<Moto> getAll() throws DAOException {
        List<Moto> motos = new ArrayList<>();
        String query = "SELECT * FROM MOTOS";

        try (Connection con = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement pst = con.prepareStatement(query);
             ResultSet rs = pst.executeQuery()) {

            TreeSet<Moto.Quantitat> matricules = new TreeSet<>();

            while (rs.next()) {
                motos.add(new Moto(
                        rs.getInt("id"),
                        rs.getString("model"),
                        rs.getDouble("pes"),
                        rs.getBoolean("es_en_marches"),
                        matricules
                ));
            }
        } catch (SQLException e) {
            //throw new DAOException("Error accessing database", e);
        }
        return motos;
    }

    public static void creaTaulaMotos() throws DAOException {
        String checkTableExists = "BEGIN " +
                "   DECLARE " +
                "       t_count NUMBER; " +
                "   BEGIN " +
                "       SELECT COUNT(*) INTO t_count FROM user_tables WHERE table_name = 'MOTOS'; " +
                "       IF t_count = 0 THEN " +
                "           EXECUTE IMMEDIATE 'CREATE TABLE MOTOS ( " +
                "               ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                "               MODEL VARCHAR2(100) NOT NULL, " +
                "               PES NUMBER(10) NOT NULL, " +
                "               ES_EN_MARCHES NUMBER(1) " +
                "           )'; " +
                "       END IF; " +
                "   END; " +
                "END;";

        try (Connection con = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement pst = con.prepareStatement(checkTableExists)) {
            pst.execute();
        } catch (SQLException e) {
            //throw new DAOException("Error creating table", e);
        }
    }

    public void save(Moto obj) throws DAOException {
        String query = "INSERT INTO MOTOS (MODEL, PES, ES_EN_MARCHES) VALUES (?, ?, ?)";

        try (Connection con = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement pst = con.prepareStatement(query)) {

            pst.setString(1, obj.getModelMoto());
            pst.setDouble(2, obj.getPes());
            pst.setBoolean(3, obj.isEnMarches());

            pst.executeUpdate();
        } catch (SQLException e) {
            //throw new DAOException("Error saving moto", e);
        }
    }

    public void update(Moto obj) throws DAOException {
        String query = "UPDATE MOTOS SET MODEL = ?, PES = ?, ES_EN_MARCHES = ? WHERE ID = ?";

        try (Connection con = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement pst = con.prepareStatement(query)) {

            pst.setString(1, obj.getModelMoto());
            pst.setDouble(2, obj.getPes());
            pst.setBoolean(3, obj.isEnMarches());
            pst.setLong(4, obj.getId());

            pst.executeUpdate();
            con.commit();
        } catch (SQLException e) {
            // handle exception
        }
    }


    public void delete(Moto obj) throws DAOException {
        String query = "DELETE FROM MOTOS WHERE ID = ?";

        try (Connection con = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement pst = con.prepareStatement(query)) {

            pst.setLong(1, obj.getId());

            pst.executeUpdate();
        } catch (SQLException e) {
            //throw new DAOException("Error deleting moto", e);
        }
    }

}
